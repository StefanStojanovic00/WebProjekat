// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace bib.Migrations
{
    [DbContext(typeof(BibliotekaContext))]
    [Migration("20220305204240_V1")]
    partial class V1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Biblioteka", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Biblioteka");
                });

            modelBuilder.Entity("Models.Clan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BibliotekaID")
                        .HasColumnType("int");

                    b.Property<int>("ClanskaKarta")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.HasIndex("BibliotekaID");

                    b.ToTable("Clan");
                });

            modelBuilder.Entity("Models.Iznajmljivanje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BibliotekaID")
                        .HasColumnType("int");

                    b.Property<int?>("ClanID")
                        .HasColumnType("int");

                    b.Property<int?>("KnjigaID")
                        .HasColumnType("int");

                    b.Property<int?>("MesecID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BibliotekaID");

                    b.HasIndex("ClanID");

                    b.HasIndex("KnjigaID");

                    b.HasIndex("MesecID");

                    b.ToTable("Iznajmljivanje");
                });

            modelBuilder.Entity("Models.Knjiga", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BibliotekaID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Sifra")
                        .HasColumnType("int");

                    b.Property<int?>("ZanrID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BibliotekaID");

                    b.HasIndex("ZanrID");

                    b.ToTable("Knjiga");
                });

            modelBuilder.Entity("Models.Mesec", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.ToTable("Mesec");
                });

            modelBuilder.Entity("Models.Zanr", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.ToTable("Zanr");
                });

            modelBuilder.Entity("Models.Clan", b =>
                {
                    b.HasOne("Models.Biblioteka", "Biblioteka")
                        .WithMany("BibliotekaClan")
                        .HasForeignKey("BibliotekaID");

                    b.Navigation("Biblioteka");
                });

            modelBuilder.Entity("Models.Iznajmljivanje", b =>
                {
                    b.HasOne("Models.Biblioteka", "Biblioteka")
                        .WithMany("KnjigaBiblioteka")
                        .HasForeignKey("BibliotekaID");

                    b.HasOne("Models.Clan", "Clan")
                        .WithMany("ClanKnjiga")
                        .HasForeignKey("ClanID");

                    b.HasOne("Models.Knjiga", "Knjiga")
                        .WithMany("KnjigaClan")
                        .HasForeignKey("KnjigaID");

                    b.HasOne("Models.Mesec", "Mesec")
                        .WithMany("MesecIznajmljivanje")
                        .HasForeignKey("MesecID");

                    b.Navigation("Biblioteka");

                    b.Navigation("Clan");

                    b.Navigation("Knjiga");

                    b.Navigation("Mesec");
                });

            modelBuilder.Entity("Models.Knjiga", b =>
                {
                    b.HasOne("Models.Biblioteka", "Biblioteka")
                        .WithMany("BibliotekaKnjiga")
                        .HasForeignKey("BibliotekaID");

                    b.HasOne("Models.Zanr", "Zanr")
                        .WithMany("KnjigaZanr")
                        .HasForeignKey("ZanrID");

                    b.Navigation("Biblioteka");

                    b.Navigation("Zanr");
                });

            modelBuilder.Entity("Models.Biblioteka", b =>
                {
                    b.Navigation("BibliotekaClan");

                    b.Navigation("BibliotekaKnjiga");

                    b.Navigation("KnjigaBiblioteka");
                });

            modelBuilder.Entity("Models.Clan", b =>
                {
                    b.Navigation("ClanKnjiga");
                });

            modelBuilder.Entity("Models.Knjiga", b =>
                {
                    b.Navigation("KnjigaClan");
                });

            modelBuilder.Entity("Models.Mesec", b =>
                {
                    b.Navigation("MesecIznajmljivanje");
                });

            modelBuilder.Entity("Models.Zanr", b =>
                {
                    b.Navigation("KnjigaZanr");
                });
#pragma warning restore 612, 618
        }
    }
}
